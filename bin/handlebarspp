#!/usr/bin/env node
/* 
Copyright (c) 2015, Yahoo Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.

Authors: Nera Liu <neraliu@yahoo-inc.com>
         Albert Yu <albertyu@yahoo-inc.com>
         Adonis Fung <adon@yahoo-inc.com>
*/
/**
This utility parses the handlebars template file and adds the context-sensitive XSS helper markups
*/
(function() {

    function printUsage() {
        console.log("Usage: handlebarspp template...\n\n\
Options:\n\
\t-D\tDisable Partial Handling, and assume that partials are placed and will result in the text (aka HTML Data) context (default: false).\n\n\
\t-p\tPartial Directory. The Secure Handlebars preloads the partials into the memory for partial parsing.\n\n\
\t-e\tPartial File Extension. The partial file extension. (default: .handlebars)\n\n\
\t-c\tMelt Partials into Template (experimental). The Secure Handlebars combines the partial contents into the input template. (default:false)\n\n\
\t-d\tDump the preprocessed partials (prefixed with SJST/) into the partial directory\n\n\
\t-s\tStrict Mode. The Secure Handlebars throws exception if warnings are encountered. (default:false)\n\n\
");
    }

    var Promise = require('bluebird'),
        fs = Promise.promisifyAll(require("fs")),
        glob = Promise.promisify(require('glob')),
        mkdirp = Promise.promisify(require('mkdirp')),
        path = require('path'),
        argv = require('minimist')(process.argv.slice(2)),
        ContextParserHandlebars = require("../src/context-parser-handlebars.js");

    var filePath = argv['_'][0], partialsDir, extname;

    // TODO: update the README with version bump up
    if (!filePath) {
        printUsage();
        process.exit(1);
        return;
    }

    // append trailing slash if not exists
    partialsDir = argv['p'];
    if (partialsDir) {
        partialsDir = path.resolve(partialsDir);
        partialsDir += partialsDir.slice(-1) === '/' ? '' : '/';
    }

    // prefix a dot if not exists
    extname = argv['e'] || '.handlebars';
    extname = (extname.charAt(0) === '.' ? '' : '.') + extname;

    dump = argv['d'];


    // this function will read all the templates into a memory cache
    function getTemplates (dirPath, extname) {
        var cache = {}, 
            extRegex = new RegExp(extname + '$');

        return !dirPath ? Promise.resolve(cache) : glob(dirPath + '**/*' + extname, {follow: true}).map(function (filePath) {
            return Promise.join(fs.readFileAsync(filePath, 'utf8'), function(content) {
                key = path.relative(dirPath, filePath).replace(extRegex, '');
                cache[key] = content;
            });
        }).then(function(){
            return cache;
        }).catch(function(e) {
            console.warn("[ERROR] Failed to read! ", e);
        });
    }

    // this funciton preprocess a template
    function preProcessTemplate (templateContent, rawPartialsCache, processedPartialsCache) {
        return new ContextParserHandlebars({
            printCharEnable: true,
            processingFile: filePath,
            strictMode: argv['s'] === true,

            // support partial parsing
            enablePartialHandling: !argv['D'],
            enablePartialCombine: argv['c'],
            shbsPartialsCache: {
                raw: rawPartialsCache,
                preprocessed: processedPartialsCache
            }

        }).analyzeContext(templateContent);
    }

    var processedPartialsCache = {};
    // the partial parsing will be supported if the partial can be loaded from memory
    // otherwise this partial parsing will be disabled by default.
    getTemplates(partialsDir, extname).then(function(partialsCache){

        // TODO: use getTemplates() to iterate over all templates for preProcessing
        return Promise.join(fs.readFileAsync(filePath, 'utf-8'), function(templateContent){
            return preProcessTemplate(templateContent, partialsCache, processedPartialsCache);
        });

    }).then(function(){

        if (!dump || !partialsDir) {
            process.exit(0);
            return;
        }

        var promises = Object.keys(processedPartialsCache).map(function(partialName) {
            var destFilePath = partialsDir + partialName + extname;

            // create necessary folders, and write the pre-processed file
            return Promise.join(mkdirp(path.dirname(destFilePath)), function(){
                return fs.writeFileAsync(destFilePath, processedPartialsCache[partialName], 'utf8');
            });
            
        });

        return Promise.all(promises).then(function() {
            process.exit(0);
        }).catch(function(e) {
            console.warn('[ERROR] Failed to write '+e);
        });

    }).catch(function(err) {
        console.warn("[ERROR] "+err);
        process.exit(1);
    });

}).call(this);
